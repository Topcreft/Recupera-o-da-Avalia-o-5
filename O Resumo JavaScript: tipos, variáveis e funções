1. Tipos de Dados e Variáveis
Tipos Primitivos
O JavaScript trabalha com tipos primitivos e de objetos. Os primitivos são:
Number: Números inteiros (28) e de ponto flutuante (3.14). A divisão por zero resulta em Infinity, e 0/0 em NaN (Not a Number).
String: Textos. A codificação padrão é UTF-16. Métodos como .toLowerCase() e a propriedade .length são úteis para manipulação.
Boolean: Valores lógicos true ou false.
null e undefined: Ambos indicam ausência de valor.
null é um valor atribuído intencionalmente.
undefined geralmente indica que a variável foi declarada, mas não inicializada.
O operador == os considera iguais, mas o === os diferencia.
Variáveis e Nomenclatura
Variáveis armazenam valores. O JavaScript é case-sensitive (minhaVar é diferente de MinhaVar). Convenções de nomenclatura incluem:
camelCase: Padrão para variáveis e funções em JS (minhaVariavel).
snake_case: Usa _ para separar palavras (minha_variavel).
kebab-case: Usa -, não é válido para variáveis em JS.
PascalCase: Padrão para classes (MinhaClasse).
Evite usar palavras reservadas como if, for, const, function, etc., para nomear variáveis.
2. Conversão de Tipos
É possível converter dados entre tipos usando as funções String() e Number():
String(valor): Converte um valor para texto. Ex: String(123) resulta em "123".
Number(valor): Converte um valor para número. Ex: Number("10") resulta em 10. Se a string não for um número válido, retorna NaN.
Uma prática recomendada é sempre realizar conversões de forma explícita para evitar comportamentos inesperados.
3. Funções e Métodos
Funções Matemáticas (Math)
O objeto Math fornece funções úteis para operações matemáticas:
Math.round(): Arredonda para o inteiro mais próximo.
Math.ceil(): Arredonda para cima.
Math.floor(): Arredonda para baixo.
Math.sqrt(): Calcula a raiz quadrada.
Math.random(): Gera um número aleatório entre 0 e 1.
Funções Personalizadas
Funções são blocos de código reutilizáveis que podem receber parâmetros (entradas) e retornar um valor (return).
Sem retorno/parâmetro: function oi() { console.log('oi'); }
Com parâmetro: function cumprimenta(nome) { console.log(Oi, ${nome}!); }
Com retorno: function retornaOi() { return 'Oi!'; }
4. Estruturas Condicionais e Operadores
Estruturas Condicionais
Controlam o fluxo do programa com base em condições que retornam true ou false.
if: Executa um bloco de código se a condição for verdadeira.
if...else: Executa um bloco if se a condição for verdadeira, ou o bloco else se for falsa.
if...else if...else: Permite testar múltiplas condições.
Operadores
Além dos matemáticos (+, -, *, /), os operadores lógicos e de comparação são cruciais:
== e ===: Comparação (igualdade e igualdade estrita).
!= e !==: Comparação (diferente e estritamente diferente).
|| (OU): Retorna true se pelo menos uma condição for verdadeira.
&& (E): Retorna true se todas as condições forem verdadeiras.
5. Lidando com Erros e Depuração
JavaScript classifica os erros para facilitar a identificação:
ReferenceError: Variável não declarada.
SyntaxError: Erro de sintaxe (código mal escrito).
TypeError: Tipo de dado incorreto.
RangeError: Valor fora de um intervalo aceitável.
Para depuração, o objeto console é fundamental:
console.log(): Exibe informações no terminal.
console.error(): Exibe uma mensagem de erro.
console.table(): Exibe dados em formato de tabela.
console.trace(): Mostra a pilha de chamadas (stack trace).
